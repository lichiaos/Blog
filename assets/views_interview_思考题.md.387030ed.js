import{_ as e,o as t,c as o,V as r}from"./chunks/framework.15bfdeb5.js";const m=JSON.parse('{"title":"思考题","description":"","frontmatter":{"title":"思考题","date":"2018-07-08T00:00:00.000Z","tags":["冷知识"],"categories":["思考题"],"author":"尘丶骁"},"headers":[],"relativePath":"views/interview/思考题.md","filePath":"views/interview/思考题.md"}'),i={name:"views/interview/思考题.md"},a=r('<h2 id="_1-tostring-报错带来的问题" tabindex="-1">1.toString() 报错带来的问题 <a class="header-anchor" href="#_1-tostring-报错带来的问题" aria-label="Permalink to &quot;1.toString() 报错带来的问题&quot;">​</a></h2><p><code>Invalid or unexpected token</code> 首先报错是因为把<code>.</code>后面的<code>toString()</code> 当成了 十进制中的一部分, 但是如果写成<code>1. toString()</code> 或者是<code>1..toString()</code>的话, 会经过一个封箱转换的过程, 会产生一个临时对象Number去调用toString方法.</p><h3 id="拓展题" tabindex="-1">拓展题 <a class="header-anchor" href="#拓展题" aria-label="Permalink to &quot;拓展题&quot;">​</a></h3><p><em>拆箱转换</em> ES内部调用<code>toPrimitive(input,preferedType?)</code> input是输入的值，preferedType是期望转换的类型，他可以是字符串，也可以是数字。</p><ol><li>如果PreferredType被标记为String</li></ol><p>1. 如果input是原始值，直接返回这个值；</p><p>2. 否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；</p><p>3. 否则，调用input.toString()。如果结果是原始值，返回结果；</p><p>4. 否则，抛出错误。 2. 如果PreferredType被标记为String 1、如果输入的值已经是一个原始值，则直接返回它 2、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。 3、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法， 如果valueOf()方法的返回值是一个原始值，则返回这个原始值。 4、否则，抛出TypeError异常。</p><ol start="3"><li>如果没有PreferredType这个参数, PerferredType的值会按照这样来自动设置 1、该对象为Date类型，则PreferredType被设置为String 2、否则，PreferredType被设置为Number</li></ol><p><code>[]+[]</code> // &#39;&#39; <code>{}+[]</code> // 0 <code>{}+{}</code> // &quot;[object, Object][object Object]&quot; || NAN <code>[]+{}</code> // &quot;[object Object]&quot;</p><p><em>注意</em>: <code>{}</code> 有两种解读方式, 1 代码块 2. 字面量</p>',12),c=[a];function d(n,p,s,_,l,u){return t(),o("div",null,c)}const S=e(i,[["render",d]]);export{m as __pageData,S as default};
