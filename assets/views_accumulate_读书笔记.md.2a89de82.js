import{_ as s,o as a,c as n,V as l}from"./chunks/framework.15bfdeb5.js";const d=JSON.parse('{"title":"ReadNotes","description":"","frontmatter":{"title":"ReadNotes","date":"2019-05-27T00:00:00.000Z","tags":["notes"],"categories":["frontEnd"],"author":"尘丶骁"},"headers":[],"relativePath":"views/accumulate/读书笔记.md","filePath":"views/accumulate/读书笔记.md"}'),o={name:"views/accumulate/读书笔记.md"},p=l(`<h2 id="红宝书" tabindex="-1">红宝书 <a class="header-anchor" href="#红宝书" aria-label="Permalink to &quot;红宝书&quot;">​</a></h2><h3 id="第二章-在html中使用javascript" tabindex="-1">第二章: 在html中使用javascript <a class="header-anchor" href="#第二章-在html中使用javascript" aria-label="Permalink to &quot;第二章:  在html中使用javascript&quot;">​</a></h3><h4 id="_1-script-元素" tabindex="-1">1. <em>&lt;script&gt;元素</em> <a class="header-anchor" href="#_1-script-元素" aria-label="Permalink to &quot;1. *\\&lt;script\\&gt;元素*&quot;">​</a></h4><ul><li><code>async</code>: 表示应该立即下载脚本, 但不妨碍页面中的其他操作, 比如下载其他资源或者等待其他脚本执行, 只对外部脚本文件有效.</li><li><code>defer</code>: 表示延迟脚本执行(<strong>在遇到&lt;/html&gt;标签后再执行</strong>)到页面被完全解析和显示之后再执行, 只对外部脚本文件有效.</li></ul><h4 id="_2-script标签的位置" tabindex="-1">2. script标签的位置 <a class="header-anchor" href="#_2-script标签的位置" aria-label="Permalink to &quot;2. script标签的位置&quot;">​</a></h4><p><strong>为什么在性能优化的时候有讲到把<code>script</code>脚本放在下面?</strong></p><ol><li><strong>放在head里</strong>: <code>defer</code>: 表示延迟脚本执行(<strong>在遇到&lt;/html&gt;标签后再执行</strong>)到页面被完全解析和显示之后再执行, 只对外部脚本文件有效. 样做的目的就是把所有的外部文件(包括css和js文件)的引用都放在同一个地方, 这也意味着要等到全部JavaScript代码都被下载丶解析丶执行完成以后, 才能开始呈现页面的内容(<em>浏览器在遇到&lt;body&gt;标签时才开始呈现内容</em>). 对于那些需要很多JavaScript代码的页面来说, 无疑会导致浏览器在呈现页面时出现明显的延迟.(出现空白现象)</li></ol><h3 id="第三章-数据类型" tabindex="-1">第三章: 数据类型 <a class="header-anchor" href="#第三章-数据类型" aria-label="Permalink to &quot;第三章: 数据类型&quot;">​</a></h3><ol><li><strong>undefined</strong>: <code>undefined</code> 类型只有一个值, 即特殊的undefined. 在使用var声明变量但未对其加以初始化时, 这个变量的值就是undefined.</li><li><strong>null</strong>: <code>null</code>是第二个只有一个值的数据类型, 即特殊的<code>null</code>, 从逻辑角度来看, <code>null</code> 值表示一个空对象指针, 所以使用<code>typeof</code> 操作符检测<code>null</code>值的时候回返回<code>object</code></li><li><strong>boolean对应的转换规则</strong>:</li></ol><table><thead><tr><th>数据类型</th><th style="text-align:center;">转换为true的值</th><th style="text-align:right;">转换为false的值</th></tr></thead><tbody><tr><td>Boolean</td><td style="text-align:center;">true</td><td style="text-align:right;">false</td></tr><tr><td>String</td><td style="text-align:center;">任何非空字符串</td><td style="text-align:right;">&#39;&#39;(空字符串)</td></tr><tr><td>Number</td><td style="text-align:center;">任何非零数值</td><td style="text-align:right;">0和NaN</td></tr><tr><td>Object</td><td style="text-align:center;">任何对象</td><td style="text-align:right;">null</td></tr><tr><td>Undefined</td><td style="text-align:center;">n/a</td><td style="text-align:right;">undefined</td></tr></tbody></table><ol start="4"><li><strong>number</strong>: 浮点数值的最高精度是17位小数, 但在进行算术计算时精度远远不如整数. 例如, 0.1加0.2结果不是0.3 而是0.30000000000000004, 这种计算会产生舍入误差的问题, 有一点需要明确, 这是使用基于<code>IEEE745</code>数值的浮点计算的通病.</li></ol><h4 id="数值转换" tabindex="-1">数值转换 <a class="header-anchor" href="#数值转换" aria-label="Permalink to &quot;数值转换&quot;">​</a></h4><ol><li><strong>Number()</strong></li></ol><ul><li>如果Boolean值, true和false将分别被转换为1和0</li><li>如果是数字值, 只是简单的传入和返回</li><li>如果是null返回0, undefined 返回NaN</li><li>如果是字符串, 十六进制会转成十进制, 空字符串会转成0</li><li>如果是对象, 会调用valueOf()方法, 如果转换的结果为NaN, 则会调用对象的toString方法()</li></ul><ol start="2"><li><strong>parseInt</strong>: 如果第一个数字字符, parseInt就会继续解析第二个字符, 直到遇到非数字字符.接受第二个参数,(可以输出相应的进制)</li><li><strong>parseFloat</strong>: 和parseInt区别的是</li></ol><h4 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;语句&quot;">​</a></h4><ol><li><strong>switch语句</strong>: 给switch语句传递表达式true, 然后每个case都可以返回一个布尔值.在比较值的时候采用的是全等操作符.</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">25</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(lessthan </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">between 0 and 10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">more than 20</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li><strong>break和continue语句</strong><code>break</code>语句会立即退出循环,强制继续执行循环后面的语句. 儿continue语句虽然也是立即退出循环, 但退出循环后会从循环的顶部继续执行.</li></ol><h4 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h4><ol><li><strong>参数</strong>: 在函数调用的时候ES并不关心传递了几个参数, 原因是ES中的参数在内部都是用一个数组来表示的.函数接受到的始终都是这个数组,</li></ol><h3 id="第四章-变量丶作用域和内存问题" tabindex="-1">第四章: 变量丶作用域和内存问题 <a class="header-anchor" href="#第四章-变量丶作用域和内存问题" aria-label="Permalink to &quot;第四章: 变量丶作用域和内存问题&quot;">​</a></h3><h4 id="基本类型和引用类型的值" tabindex="-1">基本类型和引用类型的值 <a class="header-anchor" href="#基本类型和引用类型的值" aria-label="Permalink to &quot;基本类型和引用类型的值&quot;">​</a></h4><ol><li><code> undefined</code>丶<code>Null</code>丶<code>Boolean</code>丶<code>Number</code>丶<code>String</code>这5种基本数据类型都是按值访问的.因为可以操作保存在变量中的实际的值.</li><li>引用类型的值是保存在内存中的对象.与其他语言不同,JS不允许直接访问内存中的位置, 也就是不能直接操作对象的内存空间.所以在操作对象的时候, 实际上是在操作对象的引用, 而不是实际的对象.为此, 引用类型的值是按<code>引用</code>访问的.</li></ol><h4 id="复制变量值" tabindex="-1">复制变量值 <a class="header-anchor" href="#复制变量值" aria-label="Permalink to &quot;复制变量值&quot;">​</a></h4><ol><li>一个变量在复制基本类型和引用类型的值的时候.不同的是: <code>简单类型</code>的副本和之前的是相互独立的, 而<code>引用类型</code>的副本实际上是一个指针. 而这个指针指向存储在堆中的一个对象.</li></ol><div class="tip custom-block"><p class="custom-block-title">传递参数</p><p>ES中所有函数的参数都是按值传递的</p></div><h4 id="检测类型" tabindex="-1">检测类型 <a class="header-anchor" href="#检测类型" aria-label="Permalink to &quot;检测类型&quot;">​</a></h4><p>基本类型: typeof 引用类型: 所有引用类型的值都是Object的实例. 因此, 在检测一个引用类型值和Object构造函数时, instanceof操作符始终会返回true.</p><h4 id="执行环境和作用域" tabindex="-1">执行环境和作用域 <a class="header-anchor" href="#执行环境和作用域" aria-label="Permalink to &quot;执行环境和作用域&quot;">​</a></h4><p>执行环境定义了变量或函数有权访问的其他数据. 每个执行环境都有一个与之关联的<code>变量对象</code>.环境中定义的所有变量和函数都保存在这个对象中.</p><h4 id="没有块级作用域" tabindex="-1">没有块级作用域 <a class="header-anchor" href="#没有块级作用域" aria-label="Permalink to &quot;没有块级作用域&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(i) </span><span style="color:#676E95;font-style:italic;">// 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>对于有块级作用域的语言来说, for语句初始化变量的表达式所定义的变量只会存在于循环的环境, 而对于JS来说, 即使在for循环执行结束之后, 也依旧会存在于循环外部的执行环境中.</p></div><h4 id="垃圾收集" tabindex="-1">垃圾收集 <a class="header-anchor" href="#垃圾收集" aria-label="Permalink to &quot;垃圾收集&quot;">​</a></h4><blockquote><p>JS具有自动垃圾回收机制, 执行环境会负责管理代码执行过程中使用的内存.</p></blockquote><ol><li><strong>垃圾收集机制原理</strong>: 找出那些不再使用的变量, 然后释放其占用的内存. 为此垃圾回收器会按照固定的时间间隔, 周期性的执行这一操作.</li><li><strong>回收策略</strong>:</li></ol><ul><li><strong>标记清除</strong>:</li></ul><ol><li>变量进入环境, ==&gt; 标记为<code>进入环境</code>, 离开环境时, ==&gt; 标记为<code>离开环境</code>.</li><li>垃圾收集器给储存在内存中的所有变量都打上标记, 然后去掉环境中的变量以及被环境中的变量所引用的变量的标记.</li><li>而在此之后再被加上标记的变量将被视为准备删除的变量. 原因是环境中的变量已经无法访问到这些变量了. 最后, 垃圾收集器完成内存清除工作. 销毁带有标记的值, 以及它们所占用的内存空间.</li></ol><ul><li><strong>引用计数</strong>:</li></ul><ol><li>跟踪记录每个值被引用的次数,</li><li><code>弊端</code>: 循环引用导致内存泄漏</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some_element</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">myObject</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">element </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myObject</span></span>
<span class="line"><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> myObject</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="第五章-引用类型" tabindex="-1">第五章: 引用类型 <a class="header-anchor" href="#第五章-引用类型" aria-label="Permalink to &quot;第五章: 引用类型&quot;">​</a></h3><h4 id="array类型" tabindex="-1">Array类型 <a class="header-anchor" href="#array类型" aria-label="Permalink to &quot;Array类型&quot;">​</a></h4><p><strong>1. splice</strong></p><ul><li><code>删除</code>: 需指定两个参数: 1. 要删除第一项的位置, 2. 要删除的项数. 例如: <code>splice(0, 2)</code>会删除数组中的前两项</li><li><code>插入/替换</code>: 需指定三个参数: 1. 起始位置, 2. 0(要删除的项数), 3. 要插入的项. 例如: <code>splice(2, 0, &#39;red&#39;, &#39;green&#39;)</code>会删除当前位置2的项, 然后再从位置2开始插入字符串.</li></ul><p><strong>2. 缩小方法</strong></p><p>ES5新增了两个缩小数组的方法: <code>reduce</code>和<code>reduceRight</code>. 两个方法都会迭代数组的所有项, 然后构建一个最终返回的值 <code>reduce</code>和<code>reduceRight</code>接受四个参数, <code>前一个值</code>, <code>当前值</code>, <code>项的索引</code>, <code>数组对象</code>.这个函数返回的任何值都会作为第一个参数自动传给下一项.</p><h4 id="date类型" tabindex="-1">Date类型 <a class="header-anchor" href="#date类型" aria-label="Permalink to &quot;Date类型&quot;">​</a></h4><p><strong>日期格式化方法</strong>:</p><ol><li><code>toDateString()</code> ----- 显示星期几丶月丶日和年</li><li><code>toTimeString()</code> ----- 显示时丶分丶秒和时区</li><li><code>toLocalDateString()</code> ----- 显示特定时区的星期几丶月丶日和年</li><li><code>toLocalTimeString()</code> ----- 显示特定时区的时丶分丶秒和时区</li></ol><h4 id="function类型" tabindex="-1">Function类型 <a class="header-anchor" href="#function类型" aria-label="Permalink to &quot;Function类型&quot;">​</a></h4><h5 id="函数内部属性" tabindex="-1">函数内部属性 <a class="header-anchor" href="#函数内部属性" aria-label="Permalink to &quot;函数内部属性&quot;">​</a></h5><ol><li>在函数内部, 有两个特殊的对象: <code>argument</code>和<code>this</code>. 其中<code>argument</code>是一个类数组对象, 包含传入函数的所有参数. <code>argument</code>对象还有一个名叫callee的属性, 该属性是一个指针, 指向拥有这个argument对象的函数.</li><li>每个函数都包含两个非继承而来的方法: apply()和call(). 这两个方法的用途都是在特定的作用域中调用函数, 实际上等于设置函数体内this对象的值. apply方法接受两个参数: 一个是在其运行函数的作用域, 另一个是参数数组</li></ol><h3 id="第六章-面向对象的编程设计" tabindex="-1">第六章: 面向对象的编程设计 <a class="header-anchor" href="#第六章-面向对象的编程设计" aria-label="Permalink to &quot;第六章: 面向对象的编程设计&quot;">​</a></h3><h4 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">​</a></h4><h5 id="_1-创建对象" tabindex="-1">1. 创建对象 <a class="header-anchor" href="#_1-创建对象" aria-label="Permalink to &quot;1. 创建对象&quot;">​</a></h5><ul><li><code>工厂模式</code>: 没有解决对象识别的问题(即怎样知道一个对象的类型)</li><li><code>构造函数</code>: 每个方法都要在每个实例上重新创建一遍.</li><li><code>理解原型对象</code>: 无论什么时候, 只要创建了一个新函数, 就会为该函数创建一个<code>prototype</code>属性, 这个属性指向函数的原型对象. 在默认情况下, 所有原型对象都会自动获得一个<code>constructor</code>(构造函数)属性, 这个属性包含一个指向<code>prototype</code>属性所在函数的指针.</li></ul><h3 id="第二十二章-高级技巧" tabindex="-1">第二十二章 高级技巧 <a class="header-anchor" href="#第二十二章-高级技巧" aria-label="Permalink to &quot;第二十二章 高级技巧&quot;">​</a></h3><h4 id="_1-函数柯里化" tabindex="-1">1. 函数柯里化 <a class="header-anchor" href="#_1-函数柯里化" aria-label="Permalink to &quot;1. 函数柯里化&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">curry</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">innerArgs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finalArgs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">innerArgs</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finalArgs</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2-函数节流" tabindex="-1">2. 函数节流 <a class="header-anchor" href="#_2-函数节流" aria-label="Permalink to &quot;2. 函数节流&quot;">​</a></h4><p>函数节流基本思想: 某些代码不可以在没有间断的情况连续重复执行. 第一次调用函数, 创建一个定时器, 在指定的时间间隔之后运行代码. 当第二次调用该函数时, 它会清除前一次的定时器并设置另一个. 如果前一个 定时器已经执行过了, 这个操作就没有任何意义.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">throttle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tId</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>只要代码是周期性执行的, 都应该使用节流.</p></blockquote><h2 id="js数据结构与算法" tabindex="-1">JS数据结构与算法 <a class="header-anchor" href="#js数据结构与算法" aria-label="Permalink to &quot;JS数据结构与算法&quot;">​</a></h2><h3 id="第3章-栈" tabindex="-1">第3章 栈 <a class="header-anchor" href="#第3章-栈" aria-label="Permalink to &quot;第3章 栈&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">栈</p><p>栈是一种遵从后进先出(LIFO)原则的有序集合. 新添加的或者带待删除的元素都保存在栈的末尾, 称为栈顶, 另一端就叫栈底. 就像生活中的羽毛球筒.</p></div><h4 id="栈的实现" tabindex="-1">栈的实现 <a class="header-anchor" href="#栈的实现" aria-label="Permalink to &quot;栈的实现&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">peek</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">items</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">isEmpty</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">size</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">clear</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">items</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">print</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">items</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="利用栈进行进制转换" tabindex="-1">利用栈进行进制转换 <a class="header-anchor" href="#利用栈进行进制转换" aria-label="Permalink to &quot;利用栈进行进制转换&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">divideBy2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">deNum</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">base</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remStack</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Stack</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">rem</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">binaryString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">digits</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0123456789ABCDEF</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">      </span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">deNum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">rem</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">deNum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">base</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">remStack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">rem</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">deNum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">deNum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">base</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">remStack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isEmpty</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">binaryString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">digits</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">remStack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()]</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">binaryString</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="第4章-队列" tabindex="-1">第4章 队列 <a class="header-anchor" href="#第4章-队列" aria-label="Permalink to &quot;第4章 队列&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">队列</p><p>队列遵从FIFO原则的一组有序的项.队列在尾部添加新元素, 并从顶部移除元素. 最新添加的元素必须排在队列的末尾.</p></div><h2 id="es6函数式编程" tabindex="-1">ES6函数式编程 <a class="header-anchor" href="#es6函数式编程" aria-label="Permalink to &quot;ES6函数式编程&quot;">​</a></h2><h3 id="柯里化" tabindex="-1">柯里化 <a class="header-anchor" href="#柯里化" aria-label="Permalink to &quot;柯里化&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">概念</p><p>柯里化是把一个多参数函数转换为一个嵌套的一元函数的过程</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> curry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">binaryFn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">firstArg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">secondArg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">binaryFn</span><span style="color:#A6ACCD;">(firstArg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> secondArg)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> curry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">No function provided</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">curriedFn</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">curriedFn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">([]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)))</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="柯里化实战" tabindex="-1">柯里化实战 <a class="header-anchor" href="#柯里化实战" aria-label="Permalink to &quot;柯里化实战&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">curry</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ary</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ary</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">f</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> squareAll </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> x)</span></span>
<span class="line"><span style="color:#82AAFF;">squareAll</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>先柯里化出来一个抽象函数, 然后再具化一个内部的函数, 然后最后传入参数</p></div><h2 id="vue实战" tabindex="-1">Vue实战 <a class="header-anchor" href="#vue实战" aria-label="Permalink to &quot;Vue实战&quot;">​</a></h2><h3 id="第三章-计算属性" tabindex="-1">第三章 计算属性 <a class="header-anchor" href="#第三章-计算属性" aria-label="Permalink to &quot;第三章 计算属性&quot;">​</a></h3><p><strong>原因:</strong> 表达式过长, 逻辑更为复杂时, 就会变得臃肿甚至难以阅读和维护.</p><p><strong>用法</strong>: 计算属性可以依赖多个Vue实例的数据, 只要有一个发生变化, 计算属性就会重新执行, 视图也会更新.</p><div class="tip custom-block"><p class="custom-block-title">为什么用methods能得到同样结果还要用它?</p><p>计算属性是基于他的依赖缓存的. 一个计算属性所依赖的数据发生变化时, 他才可以重新取值,而methods则是每次渲染都会执行</p></div><h3 id="第七章-组件详解" tabindex="-1">第七章 组件详解 <a class="header-anchor" href="#第七章-组件详解" aria-label="Permalink to &quot;第七章 组件详解&quot;">​</a></h3><h4 id="通信方式" tabindex="-1">通信方式 <a class="header-anchor" href="#通信方式" aria-label="Permalink to &quot;通信方式&quot;">​</a></h4><ol><li><strong>父子</strong>: <code>props</code> 丶 <code>$emit()</code></li><li><strong>跨级组件</strong>: <code>$bus.$emit()</code> 丶 <code>$bus.$on</code></li></ol><div class="tip custom-block"><p class="custom-block-title">$refs</p><p>$refs只在组件渲染完成之后才填充, 并且它是非响应式的. 所以应该避免在模板和计算属性中用到他.</p></div><h4 id="动态组件" tabindex="-1">动态组件 <a class="header-anchor" href="#动态组件" aria-label="Permalink to &quot;动态组件&quot;">​</a></h4><p><strong>用法</strong>: 使用一个特殊的<code>component</code>用来动态的挂载不同的组件 , 使用<code>is</code>特性来选择要挂载的组件.</p><h4 id="nexttick" tabindex="-1">$nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;$nextTick&quot;">​</a></h4><p><strong>异步更新队列</strong>: Vue在观察数据变化的时候不是直接更新DOM, 而是开启一个队列, 并缓冲在同一事件循环中发生的所有数据改变, 在缓冲时会去除重复数据, 从而避免不必要的计算和DOM操作.然后在下一个事件循环tick中, Vue刷新队列并执行工作.</p><h2 id="面向对象编程指南" tabindex="-1">面向对象编程指南 <a class="header-anchor" href="#面向对象编程指南" aria-label="Permalink to &quot;面向对象编程指南&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><ul><li>对象丶方法丶属性</li><li>类</li><li>封装</li><li>聚合</li><li>重用与继承</li><li>多态</li></ul><p><strong>1. 对象:</strong> 面向对象, 实质上是指&#39;事物(包括人和物)&#39;在程序设计语言中的表现形式.比如person(对象), eat丶sleep(方法), age(属性)</p><p><strong>2. 类:</strong> 类更多的像是一个模板, 而js里面压根就没有类, 一切都是基于对象的, 所依靠的是一套原型系统(prototype)实际上也是一种对象,</p><p><strong>3. 封装:</strong> 主要用于阐述对象中所包含的内容, 通常有两部分组成: * 相关的数据 * 基于这些数据所能做的事(所能调用的方法)</p><p><strong>4. 聚合:</strong> 将几个现有对象合并成一个新对象的过程.</p><p><strong>5. 继承:</strong> 通过这种继承方式, 我们可以非常优雅的实现对现有代码的重用.</p><p><strong>6. 多态:</strong> 不同对象通过相同的方法调用来实现各自行为的能力.</p><h2 id="精通正则表达式" tabindex="-1">精通正则表达式 <a class="header-anchor" href="#精通正则表达式" aria-label="Permalink to &quot;精通正则表达式&quot;">​</a></h2><p><strong>字符组</strong>: gr[ea]y: 也可以写成/grey|gray/ 也可以写成/gr(a|e)y/</p><p><strong>排除型字符组</strong>: [^1-6]匹配除了1到6以外的任何字符.</p><h3 id="可选项元素" tabindex="-1">可选项元素 <a class="header-anchor" href="#可选项元素" aria-label="Permalink to &quot;可选项元素&quot;">​</a></h3><p>/4th|4/ 等价于 /4(th)?/ 括号里面的可以是个整体</p><h3 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h3><p><code>+</code> 一个或多个, 但是连一次都匹配不到就报告失败. <code>*</code> 也是尽可能匹配多个但是没匹配到也没关系</p><h3 id="引用" tabindex="-1">引用: <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用:&quot;">​</a></h3><p>/([A-Za-z]+).+\\1/ <code>\\1</code>, <code>\\2</code> 反向引用, 表示第一次,或者是第二次从括号里面匹配到的文本.</p>`,112),e=[p];function t(r,c,i,y,F,D){return a(),n("div",null,e)}const C=s(o,[["render",t]]);export{d as __pageData,C as default};
