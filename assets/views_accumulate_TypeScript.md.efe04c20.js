import{_ as a,o as p,c as e,V as n,z as s,a as l}from"./chunks/framework.15bfdeb5.js";const m=JSON.parse('{"title":"TypeScript笔记","description":"","frontmatter":{"title":"TypeScript笔记","date":"2021-03-6","tags":["基础概念"],"categories":["frontEnd"],"author":"尘丶骁"},"headers":[],"relativePath":"views/accumulate/TypeScript.md","filePath":"views/accumulate/TypeScript.md"}'),o={name:"views/accumulate/TypeScript.md"},t=n('<h2 id="_1-typescript简介" tabindex="-1">1. TypeScript简介 <a class="header-anchor" href="#_1-typescript简介" aria-label="Permalink to &quot;1. TypeScript简介&quot;">​</a></h2><ol><li>以 JaveScript 为基础构建的语言, JS的超集</li><li>可以在任何支持 JavaScript 的平台中执行</li><li>TS拓展了JS, 并增加了类型</li><li>TS不能被JS解析器直接执行</li></ol><h3 id="开发环境搭建" tabindex="-1">开发环境搭建 <a class="header-anchor" href="#开发环境搭建" aria-label="Permalink to &quot;开发环境搭建&quot;">​</a></h3><ul><li>使用npm全局安装 =&gt; <code>npm i typescript -g</code></li><li>使用 tsc xxx.ts 进行编译</li></ul><h2 id="_2-基本类型" tabindex="-1">2. 基本类型 <a class="header-anchor" href="#_2-基本类型" aria-label="Permalink to &quot;2. 基本类型&quot;">​</a></h2>',5),r=s("ul",null,[s("li",null,[l("类型声明 "),s("ul",null,[s("li",null,"类型声明是TS非常重要的特点"),s("li",null,"通过类型声明可以指定TS变量(参数, 形参) 的类型"),s("li",null,"指定类型后, 当为变量赋值时, TS编译器会自动检查值是否符合类型声明, 符合赋值, 否则报错"),s("li",null,"语法:")]),s("div",{class:"language-js line-numbers-mode"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"js"),s("pre",{class:"shiki material-theme-palenight"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"let"),s("span",{style:{color:"#A6ACCD"}}," 变量"),s("span",{style:{color:"#89DDFF"}},":"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#FFCB6B"}},"类型")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"let"),s("span",{style:{color:"#A6ACCD"}}," 变量"),s("span",{style:{color:"#89DDFF"}},":"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#FFCB6B"}},"类型"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#89DDFF"}},"="),s("span",{style:{color:"#A6ACCD"}}," 值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#C792EA"}},"function"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#82AAFF"}},"fn"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#89DDFF"}},"("),s("span",{style:{color:"#A6ACCD","font-style":"italic"}},"参数"),s("span",{style:{color:"#89DDFF"}},":"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#FFCB6B"}},"类型"),s("span",{style:{color:"#89DDFF"}},","),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#A6ACCD","font-style":"italic"}},"参数2"),s("span",{style:{color:"#89DDFF"}},":"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#FFCB6B"}},"类型"),s("span",{style:{color:"#89DDFF"}},"):"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#FFCB6B"}},"类型"),s("span",{style:{color:"#A6ACCD"}}," "),s("span",{style:{color:"#89DDFF"}},"{")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F07178"}},"  "),s("span",{style:{color:"#89DDFF"}},"...")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#89DDFF"}},"}")])])]),s("div",{class:"line-numbers-wrapper","aria-hidden":"true"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br")])])]),s("li",null,[l("自动类型判断 "),s("ul",null,[s("li",null,"TS拥有自动类型判断机制"),s("li",null,"当对变量的声明和赋值时同时进行的, TS编译器自动判断变量的类型"),s("li",null,"当声明和赋值同时进行时, 可以省略类型声明")])]),s("li",null,[l("类型: "),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"类型"),s("th",null,"例子"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"number"),s("td",null,"1, 2, 3"),s("td",null,"任意数字")]),s("tr",null,[s("td",null,"string"),s("td",null,"'tom', 'lisa'"),s("td",null,"任意字符串")]),s("tr",null,[s("td",null,"boolean"),s("td",null,"true, false"),s("td",null,"布尔值")]),s("tr",null,[s("td",null,"字面量"),s("td",null,"let a: 10"),s("td",null,"限制变量的值就是该字面量的值")]),s("tr",null,[s("td",null,"any"),s("td",null,"*"),s("td",null,"任意类型")]),s("tr",null,[s("td",null,"unknown"),s("td",null,"*"),s("td",null,"类型安全的any(区别在于赋值给其他变量)")]),s("tr",null,[s("td",null,"void"),s("td",null,"空值(undefined)"),s("td",null,"没有值 (或undefined)")]),s("tr",null,[s("td",null,"never"),s("td",null,"没有值"),s("td",null,"不能时任何值")]),s("tr",null,[s("td",null,"object"),s("td",{"name:":"",tom:""}),s("td",null,"任意JS对象")]),s("tr",null,[s("td",null,"array"),s("td",null,"[1, 2, 3]"),s("td",null,"任意JS数组")]),s("tr",null,[s("td",null,"tuple"),s("td",null,"[string, string]"),s("td",null,"元组, TS新增类型, 固定长度")]),s("tr",null,[s("td",null,"enum"),s("td",{"A:A":""},"enum"),s("td",null,"枚举, TS新增类型")])])])])],-1),c=n(`<h2 id="_3-编译选项" tabindex="-1">3. 编译选项 <a class="header-anchor" href="#_3-编译选项" aria-label="Permalink to &quot;3. 编译选项&quot;">​</a></h2><ul><li>自动编译文件 <ul><li>编译文件时, 使用-w指令后, TS编译器会自动监视文件的变化, 并在文件变化时对文件进行重新编译</li><li>示例: <ul><li><code>tsc xxx.ts -w</code></li></ul></li></ul></li><li>自动编译整个项目 <ul><li>如果直接使用tsc指令, 则可以自动将当前项目下的所有ts文件编译为js文件</li><li>tsconfig.json是一个JSON文件, 添加配置文件后, 只需要tsc命令即可完成对整个项目的编译</li><li>配置选项 <ul><li>include <ul><li>定义希望被编译文件所在的目录</li><li>默认值: [&#39;**/*&#39;]</li><li>示例: <ul><li><code>&quot;include&quot;: [&quot;src/**/*&quot;, &quot;tests/**/*&quot;]</code></li><li>所有src目录和tests目录下的文件都会被编译</li></ul></li></ul></li><li>exclude <ul><li>定义需要排除在外的目录</li><li>默认值: [&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</li><li>示例: <ul><li><code>&quot;exclude&quot;: [&quot;./src/hello/**/*&quot;]</code></li><li>上述示例中, src下hello目录下的文件都不会被编译</li></ul></li></ul></li><li>extends <ul><li>定义被继承的配置文件</li><li>示例: <ul><li><code>&quot;extends&quot;: &quot;./confis/base&quot;</code></li><li>上述示例中, 当前配置文件中会自动包含config目录下base.json中的所有配置信息</li></ul></li></ul></li><li>files <ul><li>指定被编译文件的列表, 只有需要被编译的文件少时才会用到</li><li>示例: <ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cores.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sys.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">types.ts</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>列表中的文件都会被TS编译器所编译</li></ul></li></ul></li><li>compilerOptions <ul><li>编译选项是配置文件中最重要也是最复杂的选项</li><li>在compilerOptions中包含多个子选项, 用来完成对编译的配置 <ul><li>项目选项 <ul><li>示例: <ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ES6</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li>target <ul><li>设置ts代码编译的目标版本</li><li>可选值: <ul><li>ES3(默认)|ES5|ES6/ES2015|ES7/ES2016|ES2017|ES2018|2019|2020|ESNext</li></ul></li><li>如上设置, 我们编写的ts代码将会被编译为ES6版本的js代码</li></ul></li><li>lib <ul><li>指定代码运行时所包含的库(宿主环境)</li><li>可选值: <ul><li>ES5|ES6/ES2015|ES7/ES2016|ES2017|ES2018|2019|2020|ESNext|DOM|WebWorker|ScriptHort</li></ul></li></ul></li><li>outDir =&gt; 指定编译后代码的文件夹存放位置</li><li>outFile =&gt; 将编译后的代码合并为一个文件</li><li>allowJs: =&gt; 是否编译JS文件, 默认是false</li><li>checkJs =&gt; 是否检查js代码是否符合语法规范</li><li>removeComents: =&gt; 是否删除注释</li><li>noEmit: =&gt; 不生成编译后的文件</li><li>noEmitOnError =&gt; 当有错误时不生产编译后的文件</li><li>strict =&gt; 所有严格检查的总开关</li><li>alwaysStrict: =&gt; 是否使用严格模式编译</li><li>noImplicitAny: =&gt; 是否允许有隐式的any</li><li>strictNullChecks: =&gt; 是否严格的检查空值</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h2><p>面向对象是程序中非常重要的思想, 简而言之就是程序之中所有的操作都需要通过对象来完成.</p><ul><li>举个栗子: <ul><li>操作浏览器需要使用window对象</li><li>操作网页需要使用document对象</li><li>操作控制台需要使用console对象</li></ul></li></ul><p>一切操作都要通过对象, 也就是所谓的面向对象, 计算机程序的本质就是对现实事物的抽象. 抽象的反义词是具体, 比如: 照片是对一个具体的人的抽象, 汽车模型是对具体汽车的抽象等等. 程序也是对事物的抽象, 在程序中我们可以表示一个人, 一条狗, 一个事物到了程序中就变成了一个对象</p><p>在程序中所有的对象都被分成了两个部分: 数据和功能, 以人为例, 人的姓名, 身高, 体重等属于数据, 人可以走路, 说话, 吃饭, 睡觉这些属于人的功能. 数据在对象中被称为属性, 功能在对象中被称为方法, 所以在程序中一切皆对象.</p><h3 id="_1-类-class" tabindex="-1">1. 类(class) <a class="header-anchor" href="#_1-类-class" aria-label="Permalink to &quot;1. 类(class)&quot;">​</a></h3><p>要想面对对象, 操作对象, 首先便要拥有对象, 要创建对象就要定义一个类, 类相当于对象的模型, 程序中可以根据类创建指定类型的对象, 不同的类可以创建不同的对象.</p><ul><li>示例:</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 抽象类, 只能用作继承, 不能创建实例</span></span>
<span class="line"><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 抽象方法只能定义在抽象类中,子类必须对抽象方法进行重写</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">sayHello</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-接口" tabindex="-1">2. 接口 <a class="header-anchor" href="#_2-接口" aria-label="Permalink to &quot;2. 接口&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 描述一个对象的类型</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">myType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 接口用来定义一个类结构, 用来定义一个类中应该包含哪些属性和方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 同时接口也可以当成类型声明去使用, 接口只定义对象的结构, 而不考虑实际值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在接口中所有的方法都是抽象方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">myInterface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">myType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sss</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">111</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_3-泛型" tabindex="-1">3. 泛型 <a class="header-anchor" href="#_3-泛型" aria-label="Permalink to &quot;3. 泛型&quot;">​</a></h3><ul><li>在定义函数或者类时, 如果遇到类型不明确就可以使用泛型</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可以直接调用具有泛型的函数</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">(a: </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 不指定泛型, TS可以自动对类型进行推断</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(a: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 指定泛型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">functio n fn3</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Inter</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,16),i=[t,r,c];function y(u,D,F,C,A,d){return p(),e("div",null,i)}const h=a(o,[["render",y]]);export{m as __pageData,h as default};
