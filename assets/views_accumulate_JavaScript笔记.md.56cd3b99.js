import{_ as s,o as a,c as l,V as n}from"./chunks/framework.15bfdeb5.js";const F=JSON.parse('{"title":"JavaScript笔记","description":"","frontmatter":{"title":"JavaScript笔记","date":"2018-03-16T00:00:00.000Z","tags":["基础概念"],"categories":["frontEnd"],"author":"尘丶骁"},"headers":[],"relativePath":"views/accumulate/JavaScript笔记.md","filePath":"views/accumulate/JavaScript笔记.md"}'),o={name:"views/accumulate/JavaScript笔记.md"},e=n(`<h2 id="javascript-简介" tabindex="-1">JavaScript 简介 <a class="header-anchor" href="#javascript-简介" aria-label="Permalink to &quot;JavaScript 简介&quot;">​</a></h2><p><em>诞生记:</em> 在拨号上网的时代, 校验表单只能将数据发送到服务器端才可以验证, 但是等待时间过长, 很是蛋疼.</p><ol><li>他是一种脚本语言, 直接可以执行源码.</li><li>由 Brendan Eich 设计,借鉴了了多种语言.</li><li>由 <code>ECMAScript</code> <code>DOM</code> <code>BOM</code> 三大部分组成.</li></ol><h3 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h3><ul><li>严格区分大小写, 开头必须是字母和下划线 和$</li><li>JavaScript 忽略空白符和换行符</li><li>在语句结束的时候尽量不要省略 <code>;</code></li><li>驼峰命名法</li><li>不能数字开头</li></ul><h3 id="常用的-api" tabindex="-1">常用的 API <a class="header-anchor" href="#常用的-api" aria-label="Permalink to &quot;常用的 API&quot;">​</a></h3><ol><li>警告框: <code>alert()</code> --用户需要点击按钮才可以继续操作.</li><li>确认框: <code>confirm()</code> --用户点击确认或者取消才可以继续</li><li>输入框: <code>prompt()</code> --用户需要输入某个值,然后点击确认或者取消才可以继续.</li><li>在控制台输出: <code>console</code> --将结果打印到控制台</li></ol><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><p><strong>定义</strong> : 用来储存值或表达式.</p><p><strong>声明变量及赋值</strong> : <code> var num = 5;</code> --声明一个名为<code>num</code> 的变量并把<code>5</code> 赋值给他.</p><p><strong>声明提前</strong> : 如果声明在后,则它会自动提前,而只把值留下来.</p><p><strong>数据类型</strong></p><hr><h3 id="简单数据类型" tabindex="-1">简单数据类型 <a class="header-anchor" href="#简单数据类型" aria-label="Permalink to &quot;简单数据类型&quot;">​</a></h3><ol><li><p><code>Number</code>-------任意的数字</p><ul><li>整数: 二进制(0-1) 八进制(0 - 7) 十六进制 ( 0 - F)</li><li>浮点数:</li><li>无穷大 : <code>Infinity</code>-正无穷大 <code>- Infinity</code> 负无穷大 <code>NaN</code> : 0 / 0 的时候 或者是一个非数字字符串的时候都会是 NaN.</li></ul></li><li><p><code>String</code>---------任意字符串</p><ul><li>字符串类型,指的是用<strong>双引号</strong>或者<strong>单引号</strong>括起来的字符.<strong>注意</strong>是英文下的半角符号.</li></ul></li><li><p><code>Boolean</code>-------true / false</p><ul><li><code>true</code> : 表示逻辑上的 <strong>对</strong>;</li><li><code>false</code> : 表示逻辑上的 <strong>错;</strong></li></ul></li><li><p><code>Undefined</code> --------undefined</p><ul><li><p>只有一个值, 即<code>undefined</code></p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> v</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(v)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//弹出：undefined。 变量v声明但是没有赋值初始化，则为undefined</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(m)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//m没有定义，直接使⽤会发⽣错误。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​</p></li></ul></li><li><p><code>Null</code>---------null</p><ul><li>第二个只有一个值得数据类型,即<code>null</code> 表示一个空指针对象.</li></ul></li></ol><h3 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h3><h4 id="显示转换" tabindex="-1">显示转换 <a class="header-anchor" href="#显示转换" aria-label="Permalink to &quot;显示转换&quot;">​</a></h4><ol><li><h5 id="其他类型转number" tabindex="-1">其他类型转<code>Number</code> <a class="header-anchor" href="#其他类型转number" aria-label="Permalink to &quot;其他类型转\`Number\`&quot;">​</a></h5></li></ol><ul><li>字符串转<code>Number</code> ===&gt; 如果字符串里面都是数字则会转成对应得数字,否则<code>NaN</code></li><li><code>boolean</code>转<code>Number</code><ul><li><code>true</code> ==&gt; <code>1</code></li><li><code>false</code>==&gt; <code>0</code></li></ul></li><li><code>Undefinded</code> ==&gt; <code>NaN</code></li><li><code>Null</code> ===&gt; <code>0</code><ul><li><strong>小技巧</strong> :如果在一个数据前面加<code>+</code> 号 则会自动转为 数字类型.</li></ul></li></ul><h5 id="_2-其他类型转boolean" tabindex="-1">2.其他类型转<code>Boolean</code> <a class="header-anchor" href="#_2-其他类型转boolean" aria-label="Permalink to &quot;2.其他类型转\`Boolean\`&quot;">​</a></h5><ul><li>只有一下五个值会转成<code>false</code>,其余的都会转为<code>true</code>. <ul><li><code>0</code> <code>&quot;&quot;</code> <code>NaN</code> <code>Undefined</code> <code>Null</code></li></ul></li></ul><h5 id="_3-其他类型转string" tabindex="-1">3.其他类型转<code>String</code> <a class="header-anchor" href="#_3-其他类型转string" aria-label="Permalink to &quot;3.其他类型转\`String\`&quot;">​</a></h5><ul><li>本身长什么样子转成字符串之后就会是什么样子.</li></ul><h5 id="_4-其他类型转undefinded和null" tabindex="-1">4.其他类型转<code>Undefinded</code>和<code>Null</code> <a class="header-anchor" href="#_4-其他类型转undefinded和null" aria-label="Permalink to &quot;4.其他类型转\`Undefinded\`和\`Null\`&quot;">​</a></h5><ul><li>无法转换</li></ul><hr><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><h3 id="一-算数运算符" tabindex="-1">一.算数运算符 <a class="header-anchor" href="#一-算数运算符" aria-label="Permalink to &quot;一.算数运算符&quot;">​</a></h3><ol><li><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code><ul><li><code>+</code> 当两边都不是字符串得时候进行数学计算. 如果有<code>NaN</code>则结果也是<code>NaN</code></li><li>字符串连接: 当一边为字符串得时候就会当作连接来使用</li></ul></li></ol><hr><h3 id="二-比较运算符" tabindex="-1">二. 比较运算符 <a class="header-anchor" href="#二-比较运算符" aria-label="Permalink to &quot;二. 比较运算符&quot;">​</a></h3><ol><li>数字之间得比较就是 数学中得比较</li><li>字符串得比较 : 就是字母表中得计算 前面得字母小于后面得字母.</li><li>true &gt; false</li><li>如果两边不同 则转换为数字后比较</li></ol><ul><li><strong>特殊情况</strong><ul><li>NaN 和任何数都不想等,尽管是他自己本身.</li><li>undefi 和 null 是相等得,</li><li>null 不等于 0</li></ul></li></ul><hr><h3 id="三-三元运算符" tabindex="-1">三. 三元运算符 <a class="header-anchor" href="#三-三元运算符" aria-label="Permalink to &quot;三. 三元运算符&quot;">​</a></h3><ol><li><p>语法 : 表达式 1 ? 表达式 2 : 表达式 3</p><ul><li><p>如果表达是得逻辑值是<code>true</code>,则最终返回得是表达式 1 的值, 如果是<code>false</code>则最终返回的是表达式 2 的值.</p></li><li><p>用法:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  score </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">90</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">优秀</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> score </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">80</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">良好</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> score </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">70</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">一般</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">其他情况</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul></li></ol><hr><h3 id="四-逻辑运算符" tabindex="-1">四. 逻辑运算符 <a class="header-anchor" href="#四-逻辑运算符" aria-label="Permalink to &quot;四. 逻辑运算符&quot;">​</a></h3><ol><li>&amp;&amp; 与 只要有一个是 false,那么结果就是 false.</li><li>|| 或 只要有一个 true , 那么结果就是 true.</li></ol><ul><li>如果第一个能决定最后的结果,那值就是第一个.</li><li>如果第一个不能决定最后的结果,那值就是第二个.</li></ul><hr><h2 id="条件循环语句" tabindex="-1">条件循环语句 <a class="header-anchor" href="#条件循环语句" aria-label="Permalink to &quot;条件循环语句&quot;">​</a></h2><ol><li><p><code>if语句</code> <strong>用法</strong>:<code>if(condition){}</code> <code>if(){}else{]</code></p></li><li><p><code>switch语句</code></p><p><strong>用法</strong>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (expressions)</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">			只有switch语句中的expressions和case中的value</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> value1					对应</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">才会执行语句</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">碰到 break 之后会结束语句</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//语句1</span></span>
<span class="line"><span style="color:#A6ACCD;">    break;</span></span>
<span class="line"><span style="color:#A6ACCD;">    case value2</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//语句2</span></span>
<span class="line"><span style="color:#A6ACCD;">    break;</span></span>
<span class="line"><span style="color:#A6ACCD;">    defult</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//defalue语句</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>3.<code>for循环</code></p><p><strong>语法</strong>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(表达式1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">表达式2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">表达式3)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">表达式1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 控制循环的初始变量</span></span>
<span class="line"><span style="color:#FFCB6B;">表达式2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 如果结果式 </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> 则执行循环</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">如果式 </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">  则结束循环</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">表达式3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 一般都是进行自增或者式自减的操作</span></span>
<span class="line"><span style="color:#FFCB6B;">注意</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> 三个表达式都可以省略</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">第二个表达式省略之后默认值为    </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> 中间的分号不能省</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="4"><li><code>while循环</code></li></ol><p><strong>语法</strong> :</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="5"><li><code>dou... while</code> 循环</li></ol><p><strong>语法</strong> :</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">dou</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//循环体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;">()            先执行循环</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">然后判断条件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>​</p></li></ol><hr><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h3 id="一-函数概述" tabindex="-1">一.函数概述 <a class="header-anchor" href="#一-函数概述" aria-label="Permalink to &quot;一.函数概述&quot;">​</a></h3><ol><li><strong>简介</strong> :</li></ol><ul><li><p><strong>函数就是封装一段代码,然后完成某种功能.</strong></p></li><li><p>​ <strong>一种特别的对象(可以执行)</strong></p></li><li><p><strong>为什么要使用函数 ?</strong></p></li><li><p><strong>提高代码的复用.</strong></p></li><li><p><strong>便于阅读</strong></p></li></ul><p>​</p><ol start="2"><li><strong>语法</strong>;</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">函数名</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">形参1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">形参</span><span style="color:#A6ACCD;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> .....</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">函数体</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>说明</strong> : 定义形参的时候只需要函数名不需要 var 声明.</p><p><strong>return 的作用</strong>: 1.给调用者返回值. 2. 结束当前语句,(如果省略了 return 或者有 return 没有返回值则最后返回的值 是 undefined)</p><div class="tip custom-block"><p class="custom-block-title">重点</p><p>函数只有被调用,才会被执行.</p><p>​ 如果后面的函数名和前面的函数名重叠,则后定义的会覆盖前面定义的.</p></div><hr><h3 id="二-全局变量和局部变量" tabindex="-1">二. 全局变量和局部变量 <a class="header-anchor" href="#二-全局变量和局部变量" aria-label="Permalink to &quot;二. 全局变量和局部变量&quot;">​</a></h3><ol><li><p>全局变量: 在函数外声明. 作用于整个页面文档.</p></li><li><p>局部变量:在函数内声明 . 只在局部的区域起作用,</p><p>​ 表示形参的变量也是局部变量.</p><p>​ 在函数的外部不能访问到局部变量.</p></li></ol><div class="tip custom-block"><p class="custom-block-title">注意</p><p>函数只有被调用,才会被执行.</p><p>​ 如果后面的函数名和前面的函数名重叠,则后定义的会覆盖前面定义的.</p></div><hr><h3 id="三-匿名函数" tabindex="-1">三.匿名函数 <a class="header-anchor" href="#三-匿名函数" aria-label="Permalink to &quot;三.匿名函数&quot;">​</a></h3><ol><li><strong>作用</strong> :封装一段代码,把本来得全局变量封装为局部变量,避免命名冲突.</li></ol><h3 id="四-函数的递归" tabindex="-1">四.函数的递归 <a class="header-anchor" href="#四-函数的递归" aria-label="Permalink to &quot;四.函数的递归&quot;">​</a></h3><ol><li><strong>定义</strong> ：函数自己调用自己.</li><li>一定要有结束语句,否则会陷入死循环.</li></ol><h3 id="五-三个高阶的函数" tabindex="-1">五.三个高阶的函数 <a class="header-anchor" href="#五-三个高阶的函数" aria-label="Permalink to &quot;五.三个高阶的函数&quot;">​</a></h3><ol><li><code>map:映射</code></li><li><code>filter:过滤</code></li><li><code>reduce:归纳</code></li></ol><hr><h2 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h2><h3 id="一-对象的简介" tabindex="-1">一. 对象的简介 <a class="header-anchor" href="#一-对象的简介" aria-label="Permalink to &quot;一. 对象的简介&quot;">​</a></h3><ol><li><strong>概念:</strong><ul><li>多个数据的封装体.(或者是一个保存数据的容器)</li><li>一个对象代表现实中的一个食物,(比如一个人,有很多属性组成)</li></ul></li><li><strong>为什么要使用对象 ?</strong> 便于对多个数据进行同一个管理.</li><li><strong>对象的组成</strong><ul><li>属性 : 属性名(字符串)和属性值组成.</li><li>方法: 一种特别的属性,属性值是函数.</li></ul></li></ol><h3 id="_1-面向对象得三大特征" tabindex="-1">1. 面向对象得三大特征 <a class="header-anchor" href="#_1-面向对象得三大特征" aria-label="Permalink to &quot;1. 面向对象得三大特征&quot;">​</a></h3><ul><li><p>封装</p><p>把客观事物封装成抽象得类或者具体得象,并且类或者对象可以把自己的数据和方法只让可信的类或者对象操作,对不可信的进行信息隐藏.</p></li><li><p>继承</p><p>可以让某个类型的对象获得另一个类型的对象的属性的方法.</p></li><li><p>多态</p><p>不同实例的相同方法在不同情形下有不同表现形式.多态机制使具有不同内部结构的对象可以共享相同的外部接口.</p></li></ul><h3 id="二-对象的属性相关" tabindex="-1">二. 对象的属性相关 <a class="header-anchor" href="#二-对象的属性相关" aria-label="Permalink to &quot;二. 对象的属性相关&quot;">​</a></h3><ol><li><p><strong>对象的字面量</strong></p><p>{</p><p>属性名 : 属性值,</p><p>属性名 : 匿名函数,</p><p>}</p></li><li><p><strong>访问对象的属性</strong></p><p>对象 <code>.</code> 属性名</p><p>对象<code>[ 属性名]</code> 如果使字符串则用双引号和单引号括起来.</p><ul><li><ol><li>==属性名包含特殊字符 : - 空格.==</li><li>==属性名不确定.==</li></ol></li></ul></li><li><p><strong>增加或者修改对象</strong></p><p>对象.属性名 = 值.</p></li><li><p><strong>删除对象的属性</strong></p><p>delete 对象.属性</p></li><li><p><strong>this 的两种使用方法.</strong></p><ul><li>对象.方法() <ul><li>方法中的 this 指的就是当前的对象</li></ul></li><li>构造函数() <ul><li>括号中的 this 指的是 new 出来的对象.</li></ul></li><li>函数() <ul><li>函数内的 this 指的是 window.</li></ul></li><li>函数的借调 <ul><li>A() A.call()</li><li>每个函数 A 都有一个方法 call,使用这个这个方法,也可以调用函数 A,可以指</li></ul></li></ul></li></ol><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><h3 id="一-原型的概念" tabindex="-1">一.原型的概念 <a class="header-anchor" href="#一-原型的概念" aria-label="Permalink to &quot;一.原型的概念&quot;">​</a></h3><p>每一个函数或者是对象都有一个默认的属性 <code>prototype</code> 然后这个原型指向一个对象,称为原型对象.原型对象里面也有一个属性<code>constructor</code> 表示构造器,他会指向函数对象</p><p><strong>原型的作用?</strong> : 可以在原型中添加属性和方法被构造出来的函数共用.</p><p><strong>原型的使用</strong> : 一般原型里面添加方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">_init</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">opt</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">_init </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;">opt</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">constructor </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Person</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">speak</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">say</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">person</span><span style="color:#A6ACCD;">(name :</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nage : </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">sex : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">男</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="显示原型和隐式原型" tabindex="-1">显示原型和隐式原型 <a class="header-anchor" href="#显示原型和隐式原型" aria-label="Permalink to &quot;显示原型和隐式原型&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fn</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//每个函数function都有一个prototype,即显示原型属性,默认指向一个空的object对象;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">-----------------------------------</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fn</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)   </span><span style="color:#676E95;font-style:italic;">//每个实例对象都有一个一个__proto__,即隐式对象.</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">----------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">	console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">protptype </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)  </span><span style="color:#676E95;font-style:italic;">//对象的隐式原型的值与其对应的构造函数的显示原型的值相等.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="原型链的一些相关" tabindex="-1">原型链的一些相关 <a class="header-anchor" href="#原型链的一些相关" aria-label="Permalink to &quot;原型链的一些相关&quot;">​</a></h3><ol><li>如过读取对象的属性值,就会查找原型链</li><li>设置对象的属相值的时候,则不会去查找原型链,如果自身没有此属性则会直接在添加.</li></ol><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="一-数组的简介" tabindex="-1">一. 数组的简介 <a class="header-anchor" href="#一-数组的简介" aria-label="Permalink to &quot;一. 数组的简介&quot;">​</a></h3><p><strong>1. 什么是数组</strong> ?</p><ul><li>数组就是一些简单数据的有序结合, 里面可以包含任意数据.</li></ul><p><strong>2.为什么要用数据组</strong> ?</p><ul><li>储存相同类型的数据时用变量或者是对象十分的不方便,所以用数组来表示</li></ul><h3 id="_3-数组的用法" tabindex="-1"><strong>3.数组的用法?</strong> <a class="header-anchor" href="#_3-数组的用法" aria-label="Permalink to &quot;**3.数组的用法?**&quot;">​</a></h3><ul><li>数组的创建 <ul><li>字面量:<code>var arr = [element,index,self]</code></li><li>构造函数:<code>var arr = new Array()</code></li></ul></li></ul><h3 id="_4-数组的遍历-var-arr-112-4-325-5-344-534-3" tabindex="-1"><strong>4.数组的遍历</strong> <code>var arr = [112,4,325,5,344,534,3]</code> <a class="header-anchor" href="#_4-数组的遍历-var-arr-112-4-325-5-344-534-3" aria-label="Permalink to &quot;**4.数组的遍历** \`var arr = [112,4,325,5,344,534,3]\`&quot;">​</a></h3><ul><li>for 循环 <ul><li><code>for(i = 0 ; i &lt; arr.length ; i++)</code></li></ul></li><li>for in (for in 遍历出来的是数组的下标)</li><li>for of</li><li>forEach <ul><li><code>arr.forEach(function(e,i){\`\`})</code></li></ul></li></ul><h3 id="_5-数组的转换" tabindex="-1"><strong>5.数组的转换</strong> <a class="header-anchor" href="#_5-数组的转换" aria-label="Permalink to &quot;**5.数组的转换**&quot;">​</a></h3><ul><li>toString() <code>arr.toString</code> 把数组转换为字符串之后,每个元素再用逗号连接.</li><li>join() <code>arr.join()</code> 把数组转换为字符串但是&quot;&quot;中的符号可以自定义.</li></ul><h3 id="_6-数组的一些常用方法" tabindex="-1">6.数组的一些常用方法 <a class="header-anchor" href="#_6-数组的一些常用方法" aria-label="Permalink to &quot;6.数组的一些常用方法&quot;">​</a></h3><ul><li>添加元素 <ul><li>首位添加 : unshift 末尾添加: push</li><li>首位删除: shift 末尾删除: pop</li></ul></li><li>倒置数组 : <code>reverce</code></li><li>连接数组 : <code>concat</code></li><li>切割元素 <code>slice(from,to)</code><ul><li><code>from</code>包括 <code>to</code>不包括 <code>to</code>可以省略 如果都省略则整个都会切下来</li><li>返回的是一个新数组.</li></ul></li><li>替换元素 : <code>splice(参数1,参数2,参数3)</code><ul><li><code>参数1</code> 表示从那个下标开始 <code>参数2</code> 表示删除几个元素, <code>参数3</code>表示要增加的元素</li></ul></li></ul><h3 id="_7-数组的排序" tabindex="-1"><strong>7.数组的排序</strong> <a class="header-anchor" href="#_7-数组的排序" aria-label="Permalink to &quot;**7.数组的排序**&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">retrun</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">升序</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">retrun</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">     </span><span style="color:#A6ACCD;">降序</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_8-数组的去重" tabindex="-1"><strong>8.数组的去重</strong> <a class="header-anchor" href="#_8-数组的去重" aria-label="Permalink to &quot;**8.数组的去重**&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toHeavy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toHeavy</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">set</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">set</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><h3 id="一-字符串的创建" tabindex="-1">一. 字符串的创建 <a class="header-anchor" href="#一-字符串的创建" aria-label="Permalink to &quot;一. 字符串的创建&quot;">​</a></h3><ul><li>字面量 <code>var s = &quot;&quot;</code></li><li>toString 转换函数 <code>var s = String(可以是任何参数)</code></li></ul><h3 id="二-字符串的常用方法" tabindex="-1">二.字符串的常用方法 <a class="header-anchor" href="#二-字符串的常用方法" aria-label="Permalink to &quot;二.字符串的常用方法&quot;">​</a></h3><table><thead><tr><th>方法</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td>s.charAt(index)</td><td style="text-align:center;">返回的是下标中的字符</td></tr><tr><td>s[]</td><td style="text-align:center;">也可以访问</td></tr><tr><td>charcodeAt</td><td style="text-align:center;">返回的 Unicode 码</td></tr><tr><td>substring(start , stop)</td><td style="text-align:center;">返回的是区间下标内的字符,下标为负值会替换成 0</td></tr><tr><td>slice(start,stop)</td><td style="text-align:center;">和 substring 的唯一区别就是把负值下标加上字符串长度</td></tr><tr><td>substr(start , length)</td><td style="text-align:center;">标开始,定义长度的的字符</td></tr><tr><td>toUpperCase<code>------</code>toLowerCase()</td><td style="text-align:center;">转换大小写</td></tr><tr><td>trim</td><td style="text-align:center;">去除字符串首尾的空白字符</td></tr></tbody></table><hr><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h2><h3 id="一-正则表达式的创建" tabindex="-1">一.正则表达式的创建 <a class="header-anchor" href="#一-正则表达式的创建" aria-label="Permalink to &quot;一.正则表达式的创建&quot;">​</a></h3><ol><li><code>var re = new RegExp(s,&quot;gi&quot;)</code></li><li>字面量 : <code>var re = /a/gi;</code></li></ol><h3 id="二-常用的方法" tabindex="-1">二. 常用的方法 <a class="header-anchor" href="#二-常用的方法" aria-label="Permalink to &quot;二. 常用的方法&quot;">​</a></h3><ul><li><code>text()</code> : 匹配修饰符,如果有<code>g</code> 的话会从上次匹配到的位置开始继续匹配,如果没<code>g</code> 的话会从头开始匹配. <ul><li>如果匹配不 了,下次还是会从头开始,</li><li><code>lastIndex</code> 这个属性记录上次匹配的位置</li></ul></li><li><code>exec()</code> :会把匹配到的元素返回到数组,并包括<code>index</code> 和源码两个数型</li></ul><h3 id="三-规则" tabindex="-1">三. 规则 <a class="header-anchor" href="#三-规则" aria-label="Permalink to &quot;三. 规则&quot;">​</a></h3><p>| 字符 | 含义 | | ----- | :------------------------------------------------------- | --- | | . | 匹配任意的字符 | | [123] | 要么 1 要么 2 要么 3 | | [a-z] | 所有的小写字母 | | [^a] | 不是字母 a 当把 ^放在[]中的时候表示非 | | \\d | 匹配的所有的数字 ===[0-9] | | \\D | 匹配所有的非数字 === [^0-9] | | \\w | 匹配所有的单词字符 数字字母和下划线 ===[0-9a-zA-Z_] | | \\W | 匹配所有的非单词字符 非数字字母和下划线 ===[^0-9a-za-z_] | | \\s | 匹配一个空白字符，包括空格、制表符、换页符和换行符。 | | \\S | 匹配一个非空白字符 | | ^a | 以 a 开头 | | a$ | 以 a 结尾. | | ? | 表示 0 个或 1 个 | | * | 表示 0 个或多个 &gt;=0 | | + | 表示 1 个或多个 &gt;=1 | | {m} | 正好 m 个 | | m, | m 个或多个&gt;m | | m,n | 至少 m 个, 最多 n 个 | | () | 进行分组 | | 丨 | 或 | = |</p><h3 id="四-支持正则表达是的四种字符串用法" tabindex="-1">四.支持正则表达是的四种字符串用法 <a class="header-anchor" href="#四-支持正则表达是的四种字符串用法" aria-label="Permalink to &quot;四.支持正则表达是的四种字符串用法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Abc123aBc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">gi</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">gi</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 即使设置的全局模式，每次search也是从开始向后查找</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//match⽅法和正则表达式的exec()⽅法的作⽤是⼀样的，但是match会⼀次性把所有的匹配放在⼀个数组</span></span>
<span class="line"><span style="color:#A6ACCD;">中，全部返回</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">gi</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Abc,aBc</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">ab</span><span style="color:#89DDFF;">]/</span><span style="color:#F78C6C;">gi</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//把a或b替换成x</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> ss </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">0-9</span><span style="color:#89DDFF;">]+/</span><span style="color:#F78C6C;">gi</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//⽤1个或多个数字切割。 Abc,aBc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>s.search</code>: 返回值是匹配到元素的下标,不管加不加<code>g</code> 都是从头开始找</p><p><code>s.match</code> : 和<code>exce()</code> 的方法一样但是<code>match</code> 会吧匹配到的都放在一个数组中,全部返回.</p><p><code>s.replace</code>(用\\1 来捕获组, 用$1 来替换:替换满足正则表达式返回</p><p><code>S.split:</code> 把满足的正则表达是切割出去,,,并返回一个字符串数组.</p><hr><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h2><h3 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-label="Permalink to &quot;定时器&quot;">​</a></h3><ul><li><code>setTimeout</code> : 在指点时间后执行函数里面的代码</li><li><code>setInterval</code>: 每隔一段时间后自动执行代码.</li></ul><hr><h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h2><h3 id="节点-每个节点都是一个对象" tabindex="-1">节点(每个节点都是一个对象) <a class="header-anchor" href="#节点-每个节点都是一个对象" aria-label="Permalink to &quot;节点(每个节点都是一个对象)&quot;">​</a></h3><ul><li><p>所有的节点都有三个共同的属性</p><ul><li>nodeName : 节点名</li><li>nodeType :节点类型</li><li>nodeValue : 节点值</li></ul><p><strong>获取元素节点的多种方式</strong></p><ol><li>根据 id 来获取<code>getElementById</code><ul><li>给元素命名 ID 的时候,理论不重复,如果重复,找到的是第一个</li></ul></li><li>根据 className 来查找元素<code>getElementsByClass</code><ul><li>得到的是多个元素组成的类数组</li></ul></li><li>根据标签名来获取 <code>getElementsByTagName</code><ul><li>得到的也是多个元素组成的类数组(<code>array-like</code>)</li></ul></li><li>通过 name 属性的值来获取 <code>getElementsByName</code><ul><li>不常用,一般用来查找表单元素</li></ul></li></ol><p><strong>html5 新增两种强大查找元素的方法:</strong></p><ol><li><code>document.querySelector(&quot;&quot;)</code><ul><li>只能找到满足选择器的第一个元</li></ul></li><li><code>document.querySelectorAll</code><ul><li>能找到满足的选择器的所有元素</li><li>返回的是一个类数组(Nodelist 节点列表)</li></ul></li></ol><h3 id="节点之间的关系" tabindex="-1">节点之间的关系 <a class="header-anchor" href="#节点之间的关系" aria-label="Permalink to &quot;节点之间的关系&quot;">​</a></h3><ul><li>父子节点 <ul><li><code>childN0odes</code> 获取所以子节点</li><li><code>firstChild</code> : 获取元素的第一个子节点</li><li><code>lastChild</code> : 获取元素的最后一个子节点</li><li><code>parentNode</code> : 获取元素的第一个父节点</li></ul></li><li>兄弟节点 <ul><li><code>nextSbling</code> :获取元素的下一个兄弟节点</li><li><code>previousSbling</code>: 获取元素的上个兄弟节点.</li></ul></li></ul><h3 id="创建节点" tabindex="-1">创建节点 <a class="header-anchor" href="#创建节点" aria-label="Permalink to &quot;创建节点&quot;">​</a></h3><ul><li>创建元素节点 :<code>createElement(&quot;元素名&quot;)</code> .</li><li>创建文本节点:<code>createText(&quot;文本内容&quot;)</code></li><li>给一个元素追加<code>child</code> 节点.<code>appendChild</code> (new,old)</li><li>在一个节点前增加一个节点.<code>insertBefore()</code></li><li>移除子节点 : <code>removeChild</code></li><li>替换子节点:<code>replaceChild</code>.</li><li>克隆节点<code> node.cloneNode(true/false)</code></li></ul></li><li><p><code>getAttriblute</code> 获取属性值</p></li><li><p><code>setAttribute(&quot;属性名&quot;,&quot;属性值&quot;)</code> 设置属性值.</p></li><li><p><code>removeAttribute</code> 移除属性</p></li><li><p><code>interHTML</code> : 会返回所有的内容,如果有标签会把标签解析出来.</p></li></ul><hr><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><ul><li><p><strong>事件流的三个阶段</strong></p><ul><li>捕获阶段</li><li>处于目标阶段</li><li>冒泡阶段( 默认都在冒泡阶段,因为冒泡阶段的兼容性更好)</li></ul></li><li><p><strong>事件的三要素</strong></p><ul><li>事件源(表示事件发生的那个元素的位置)</li><li>事件对象(会把事件发生的坐标,事件类型封装到一个对象中)</li><li>事件处理程序(监听器) - -执行的代码,都在函数内.</li></ul></li><li><p><strong>事件处理程序</strong></p><ul><li><p>HTML 事件处理程序</p></li><li><p>DOM0 事件处理程序</p><ul><li>注册事件的时候总是以 on 开头---<code>btn.onclick</code>---<code>btn.onmouseover</code></li><li>去掉 dom0 事件 ------<code>btn.onclick = null</code></li><li>缺点:同一个类型的事件,只能有一个事件处理程序.</li></ul></li><li><p>DOM 事件处理程序</p><ul><li><p>给元素追加监听器</p></li><li><p>参数 1:事件的类型 参数 2:事件处理程序 参数 3:事件是否在捕获阶段触发事件</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventlistener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){},</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul></li><li><p><strong>常用的一些时间</strong></p><ul><li><code>onresize</code> : 改变窗口大小时执行事件</li><li><code>onscroll</code> :滚动滚动条时.</li><li><code>onfocus</code> :获取焦点</li><li><code>onblur</code> :失去焦点.(不冒泡)</li></ul><p><strong>鼠标事件</strong></p><ul><li><code>mouseover</code>: 鼠标进入某个区域</li><li><code>mouseout</code> :鼠标从某个区域出来(这两个是冒泡的)</li><li><code>mouseenter</code></li><li><code>mouseleave</code> (这两个是不冒泡的版本)</li><li><code>mousemove</code> :鼠标移动</li></ul></li><li><p><strong>事件对象</strong>(触发事件的时候都会有一个默认的<code>event</code> 参数)</p><ul><li><code>type : click</code></li><li><code>target</code> : 事件发生区域最内层的那个元素(处于目标阶段的那个元素)</li><li><code>currentTarget</code> : 事件注册在谁身上就表示那个元素.</li><li><code>stopPropagation()</code> :停止事件的进一步传播</li><li><code>preventDefault</code> () :阻止事件的默认行为.</li></ul></li></ul>`,132),p=[e];function r(t,c,i,d,y,D){return a(),l("div",null,p)}const C=s(o,[["render",r]]);export{F as __pageData,C as default};
